{"version":3,"sources":["aws-exports.js","ChatListItem.js","ChatList.js","SuperChatBot.js","App.js","serviceWorker.js","index.js"],"names":["awsmobile","aws_project_region","aws_content_delivery_bucket","aws_content_delivery_bucket_region","aws_content_delivery_url","ChatListItem","makeStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","inline","display","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","ListItem","alignItems","ListItemAvatar","Avatar","alt","src","avatarImage","ListItemText","primary","primaryText","secondary","Fragment","secondaryText","Component","ChatList","_this","chatMessages","map","message","index","src_ChatListItem","source","key","click","deleteMessageHandler","AWS","require","SuperChatBot","state","buttonClickHandler","console","log","lexruntime","config","credentials","postText","botAlias","botName","inputText","userId","requestAttributes","sessionAttributes","err","data","stack","messageList","toConsumableArray","push","setState","LexRuntime","accessKeyId","secretAccessKey","region","confirmation","alert","JSON","stringify","_this$props","title","onComplete","src_ChatList","userName","onClick","defaultProps","undefined","clearOnComplete","Amplify","configure","awsconfig","myTheme","objectSpread","AmplifyTheme","sectionHeader","App","className","src_SuperChatBot_0","welcomeMessage","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ac2d5fc5.chunk.js","sourcesContent":["// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile =  {\n    \"aws_project_region\": \"us-east-1\",\n    \"aws_content_delivery_bucket\": \"superchatbot-blockstack-app\",\n    \"aws_content_delivery_bucket_region\": \"us-east-1\",\n    \"aws_content_delivery_url\": \"https://d7s5re1z5rti1.cloudfront.net\"\n};\n\n\nexport default awsmobile;\n","import React, { Component } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '100%',\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  inline: {\r\n    display: 'inline',\r\n  },\r\n}));\r\n\r\nclass ChatListItem extends Component {\r\n\r\n    constructor(props){\r\n        super(props);   \r\n    }\r\n\r\n    render(){\r\n        return (               \r\n            <ListItem alignItems=\"flex-start\">\r\n                <ListItemAvatar>\r\n                    <Avatar alt={this.props.alt}  src={this.props.avatarImage} />\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                primary={this.props.primaryText}\r\n                secondary={\r\n                    <React.Fragment>                \r\n                    {this.props.secondaryText}\r\n                    </React.Fragment>\r\n                }\r\n                />\r\n            </ListItem>  \r\n            )\r\n        }\r\n}\r\n\r\nexport default ChatListItem;","import React, { Component } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ChatListItem from './ChatListItem';\r\nimport zIndex from '@material-ui/core/styles/zIndex';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '100%',\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  inline: {\r\n    display: 'inline',\r\n  },\r\n}));\r\n\r\nclass ChatList extends Component{\r\n  //const classes = useStyles();\r\n\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n\r\n  render(){\r\n    return (\r\n        <div>\r\n          {this.props.chatMessages.map((message, index) => {\r\n\r\n            return <ChatListItem \r\n                    primaryText = {message.source} \r\n                    secondaryText={message.message}\r\n                    key = {index}\r\n                    click={() => this.deleteMessageHandler(index)}                  \r\n                    />\r\n          })}\r\n        </div>        \r\n      \r\n    );\r\n}\r\n}\r\n\r\nexport default ChatList;","import React, {Component} from 'react';\r\nimport './SuperChatBot.css';\r\nimport ChatList from './ChatList';\r\nlet AWS = require('aws-sdk');\r\n\r\n\r\n\r\n\r\nclass SuperChatBot extends Component{\r\nconstructor(props){\r\n    super(props);   \r\n    this.lexruntime = new AWS.LexRuntime({accessKeyId:this.props.accessKeyId ,\r\n                                            secretAccessKey :this.props.secretAccessKey,\r\n                                            region:this.props.region});\r\n     console.log('region = ', this.lexruntime.credentials);\r\n     \r\n                                   \r\n     \r\n}\r\nstate={\r\n    chatMessages:[{source:\"bot\",message:\"Hello\"}, {source:\"user\",message:\"Good Morning\"}]\r\n}\r\n\r\nhandleComplete(err, confirmation) {\r\n    if (err) {\r\n      alert('Bot conversation failed')\r\n      return;\r\n    }\r\n\r\n    alert('Success: ' + JSON.stringify(confirmation, null, 2));\r\n    return 'Trip booked. Thank you! what would you like to do next?';\r\n  }\r\n\r\n\r\nbuttonClickHandler =()=>{\r\n    console.log(this.lexruntime.config.credentials);\r\n    var params = {\r\n      botAlias: 'prod', /* required */\r\n      botName: 'TableTrick', /* required */\r\n      inputText: 'start', /* required */\r\n      userId: 'sj112233', /* required */\r\n      requestAttributes: {\r\n       \r\n      },\r\n      sessionAttributes: {      \r\n      }\r\n    };\r\n    this.lexruntime.postText(params, function(err, data) {\r\n      if (err) console.log(err, err.stack); // an error occurred\r\n      else{\r\n\r\n        console.log(data);           // successful response\r\n        const messageList = [...this.state.chatMessages];\r\n        messageList.push({source:\"bot\",message: data.message});\r\n        this.setState({\r\n            chatMessages: messageList\r\n        }\r\n        )\r\n      } \r\n    });\r\n  }\r\n  \r\n\r\nrender() {\r\n    const { title, theme, onComplete } = this.props;\r\n    return (\r\n       <div>\r\n             <ChatList botName=\"TableTrick\" userName=\"SJ112233\" chatMessages={this.state.chatMessages}/>\r\n             <button onClick={this.buttonClickHandler}>Click Me</button>\r\n           \r\n       </div>\r\n\r\n    );\r\n}\r\n}\r\n\r\nSuperChatBot.defaultProps = {\r\n    title: '',\r\n    botName: '',\r\n    onComplete: undefined,\r\n    clearOnComplete: false,\r\n    accessKeyId:\"\",\r\n    secretAccessKey :\"\",\r\n    region:\"\"\r\n};\r\n\r\n\r\n\r\nexport default SuperChatBot;\r\n","import React, { Component } from 'react';\nimport Amplify, { Interactions } from 'aws-amplify';\nimport { ChatBot, AmplifyTheme } from 'aws-amplify-react';\nimport awsconfig from './aws-exports';\nimport SuperChatBot from './SuperChatBot';\n\nlet AWS = require('aws-sdk');\n\nAmplify.configure(awsconfig);\n\n// Imported default theme can be customized by overloading attributes\nconst myTheme = {\n  ...AmplifyTheme,\n  sectionHeader: {\n    ...AmplifyTheme.sectionHeader,\n    backgroundColor: '#ff6600'\n  }\n};\n\nclass App extends Component {\n\n  constructor(){  \n      super() \n     \n    }\n\n  render() {\n    console.log('Creating Chat Bot');\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Welcome to ChatBot Demo</h1>\n        \n          <SuperChatBot\n            title=\"My Bot\"\n            theme={myTheme}            \n            botName=\"TableTrick\"\n            welcomeMessage=\"Welcome, how can I help you today?\"\n            accessKeyId = \"AKIAZNKLQU3VJAED33VN\"\n            secretAccessKey =\"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\"\n            region =\"us-east-1\"    \n          />        \n\n        </header>  \n      \n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}